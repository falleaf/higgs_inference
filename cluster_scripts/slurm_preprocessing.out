11.03.2018 20:50:33 INFO    Welcome! How are you today?
11.03.2018 20:50:33 INFO    Tasks:
11.03.2018 20:50:33 INFO      Baseline training:                 True
11.03.2018 20:50:33 INFO      Random training:                   True
11.03.2018 20:50:33 INFO      Morphing training:                 True
11.03.2018 20:50:33 INFO      Point-by-point training:           True
11.03.2018 20:50:33 INFO      Calibration:                       False
11.03.2018 20:50:33 INFO      Likelihood ratio eval:             True
11.03.2018 20:50:33 INFO      Neyman construction:               True
11.03.2018 20:50:33 INFO      Neyman construction (alternative): False
11.03.2018 20:50:33 INFO      Roaming:                           False
11.03.2018 20:50:33 INFO    Options:
11.03.2018 20:50:33 INFO      Dry run:                           True
11.03.2018 20:50:33 INFO      Denominator:                       alternative
11.03.2018 21:00:45 INFO    Splitting...
11.03.2018 21:01:09 INFO    Number of events:
11.03.2018 21:01:09 INFO      All:    821636
11.03.2018 21:01:09 INFO      Training:    575145
11.03.2018 21:01:09 INFO      Calibration: 82164
11.03.2018 21:01:09 INFO      Evaluation:  164327
11.03.2018 21:01:10 INFO    Normalizing probabilities
11.03.2018 21:02:59 INFO    Generating baseline training sample
generate_data.py:228: RuntimeWarning: divide by zero encountered in log
  cut = np.isfinite(np.log(r)) & np.isfinite(scores[:, 0]) & np.isfinite(scores[:, 1])
11.03.2018 21:21:04 INFO    Generating morphing basis training sample
generate_data.py:318: RuntimeWarning: divide by zero encountered in log
  cut = np.isfinite(np.log(r)) & np.isfinite(scores[:, 0]) & np.isfinite(scores[:, 1])
11.03.2018 21:28:48 INFO    Generating point-by-point training samples
generate_data.py:408: RuntimeWarning: divide by zero encountered in log
  cut = np.isfinite(np.log(r)) & np.isfinite(scores[:, 0]) & np.isfinite(scores[:, 1])
11.03.2018 22:09:17 INFO    Generating random theta training sample
generate_data.py:490: RuntimeWarning: divide by zero encountered in log
  cut = np.isfinite(np.log(r)) & np.isfinite(scores[:, 0]) & np.isfinite(scores[:, 1])
